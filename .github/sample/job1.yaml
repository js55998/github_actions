name: Basic Job Context
on: [push]

jobs:
# JOB INFO:
  basic-job:
    runs-on: ubuntu-latest
    steps:
      - name: Print Job Context
        run: |
         echo "All about JOB=${{toJSON(job)}}"
         echo "Job Name=${{github.job}}"
# Conditional Execution Based on Job Name:
  job1:
    runs-on: ubuntu-latest
    steps:
      - name: Conditional Step
        if: github.job == 'job1'
        run: echo "This step runs only for job1"

  job2:
    runs-on: windows-latest
    steps:
      - name: Conditional Step
        if: github.job == 'job2'
        run: echo "This step runs only for job2"
# Setting Custom Job Name:
  custom-name-job:
    name: Custom Name Job
    runs-on: ubuntu-latest
    steps:
      - name: Print Custom Job Name
        run: echo "Custom Job Name= $GITHUB_JOB"
# Accessing Job Outputs:
  generate-output:
    runs-on: ubuntu-latest
    outputs:
      generated-value: ${{ steps.step1.outputs.value }}
    steps:
      - name: Generate Value
        id: step1
        run: echo "::set-output name=value::GITHUBACTIONS"

  use-output:
    runs-on: ubuntu-latest
    needs: generate-output
    steps:
      - name: Use Generated Value
        run: echo "Generated Value= ${{ needs.generate-output.outputs.generated-value }}"
# Matrix Strategy with Job Context
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [14, 16, 18]
    steps:
      - name: Print Node Version
        run: echo "Node Version= ${{ matrix.version }}"
# Passing Environment Variables to Job
  print-env:
    runs-on: ubuntu-latest
    env:
      ENV_VAR: my_value
    steps:
      - name: Print Env Var
        run: echo "Environment Variable= $ENV_VAR"
#Passing Arguments to Jobs:
  print-args:
    runs-on: ubuntu-latest
    steps:
      - name: Print Arguments
        run: echo "Arguments= ${{ github.event_name }}, ${{ github.repository }} ${{ github.ref }}"
# Accessing Job Status:
  check-status:
    runs-on: ubuntu-latest
    steps:
      - name: Check Status
        run: echo "Job Status= ${{ job.status }}"
# Timeout and Retries in Job Context:
  retry-job:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        retry:
          - 1
          - 2
    steps:
      - name: Retry Step
        run: echo "This step will retry if it fails"
        continue-on-error: true